// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        tilingOffset:   { value: [1, 1, 0, 0] }
        mainColor:      { value: [1, 1, 1, 1], linear: true, editor: { type: color } }

        # rimColor:       { value: [0, 0, 1, 1], linear: true, editor: { type: color } }
        # rimPow:         { value: 1, editor: { slide: true, range: [1, 3], step: 0.01 } }
        # rimIntensity:   { value: 1, editor: { slide: true, range: [1, 4], step: 0.01 } }
        # intersectPow:   { value: 1, editor: { slide: true, range: [1, 4], step: 0.01 } }
        # depthTexture:   { value: white } 
        # noiseTexture:   { value: white }
        # sceneTexture:   { value: white } 
        # XSpeed:         { value: 0.05, target: UVSpeed.x, editor: { slide: true, range: [0, 0.5], step: 0.01 } }
        # YSpeed:         { value: 0.05, target: UVSpeed.y, editor: { slide: true, range: [0, 0.5], step: 0.01 } }
        # distortIntensity: { value: 0.01, editor: { slide: true, range: [0, 0.5], step: 0.001 } }  
      migrations: &migs
        properties:
          mainColor:    { formerlySerializedAs: color }
  - name: transparent
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
  - name: add
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: &r1 { cullMode: none }
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one
          blendSrcAlpha: src_alpha
          blendDstAlpha: one
      properties: *props
      migrations: *migs
  - name: alpha-blend
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: *r1
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <legacy/input>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <legacy/input>
  #include <legacy/fog-vs>
  #include <builtin/uniforms/cc-forward-light>
  #include <builtin/uniforms/cc-local>

  #if USE_VERTEX_COLOR
    in lowp vec4 a_color;
    out lowp vec4 v_color;
  #endif

  // #if USE_TEXTURE
  //   out vec2 v_uv;
  //   uniform TexCoords {
  //     vec4 tilingOffset;
  //   };
  // #endif

  out vec2 v_uv;
  uniform TexCoords {
    vec4 tilingOffset;
  };

  out vec3 v_objPos;
  out vec4 v_pos;

  mat4 inverse_mat4(mat4 m)
  {
    float Coef00 = m[2][2] * m[3][3] - m[3][2] * m[2][3];
    float Coef02 = m[1][2] * m[3][3] - m[3][2] * m[1][3];
    float Coef03 = m[1][2] * m[2][3] - m[2][2] * m[1][3];
    
    float Coef04 = m[2][1] * m[3][3] - m[3][1] * m[2][3];
    float Coef06 = m[1][1] * m[3][3] - m[3][1] * m[1][3];
    float Coef07 = m[1][1] * m[2][3] - m[2][1] * m[1][3];
    
    float Coef08 = m[2][1] * m[3][2] - m[3][1] * m[2][2];
    float Coef10 = m[1][1] * m[3][2] - m[3][1] * m[1][2];
    float Coef11 = m[1][1] * m[2][2] - m[2][1] * m[1][2];
    
    float Coef12 = m[2][0] * m[3][3] - m[3][0] * m[2][3];
    float Coef14 = m[1][0] * m[3][3] - m[3][0] * m[1][3];
    float Coef15 = m[1][0] * m[2][3] - m[2][0] * m[1][3];
    
    float Coef16 = m[2][0] * m[3][2] - m[3][0] * m[2][2];
    float Coef18 = m[1][0] * m[3][2] - m[3][0] * m[1][2];
    float Coef19 = m[1][0] * m[2][2] - m[2][0] * m[1][2];
    
    float Coef20 = m[2][0] * m[3][1] - m[3][0] * m[2][1];
    float Coef22 = m[1][0] * m[3][1] - m[3][0] * m[1][1];
    float Coef23 = m[1][0] * m[2][1] - m[2][0] * m[1][1];
    
    const vec4 SignA = vec4( 1.0, -1.0,  1.0, -1.0);
    const vec4 SignB = vec4(-1.0,  1.0, -1.0,  1.0);
    
    vec4 Fac0 = vec4(Coef00, Coef00, Coef02, Coef03);
    vec4 Fac1 = vec4(Coef04, Coef04, Coef06, Coef07);
    vec4 Fac2 = vec4(Coef08, Coef08, Coef10, Coef11);
    vec4 Fac3 = vec4(Coef12, Coef12, Coef14, Coef15);
    vec4 Fac4 = vec4(Coef16, Coef16, Coef18, Coef19);
    vec4 Fac5 = vec4(Coef20, Coef20, Coef22, Coef23);
    
    vec4 Vec0 = vec4(m[1][0], m[0][0], m[0][0], m[0][0]);
    vec4 Vec1 = vec4(m[1][1], m[0][1], m[0][1], m[0][1]);
    vec4 Vec2 = vec4(m[1][2], m[0][2], m[0][2], m[0][2]);
    vec4 Vec3 = vec4(m[1][3], m[0][3], m[0][3], m[0][3]);
    
    vec4 Inv0 = SignA * (Vec1 * Fac0 - Vec2 * Fac1 + Vec3 * Fac2);
    vec4 Inv1 = SignB * (Vec0 * Fac0 - Vec2 * Fac3 + Vec3 * Fac4);
    vec4 Inv2 = SignA * (Vec0 * Fac1 - Vec1 * Fac3 + Vec3 * Fac5);
    vec4 Inv3 = SignB * (Vec0 * Fac2 - Vec1 * Fac4 + Vec2 * Fac5);
    
    mat4 Inverse = mat4(Inv0, Inv1, Inv2, Inv3);
    
    vec4 Row0 = vec4(Inverse[0][0], Inverse[1][0], Inverse[2][0], Inverse[3][0]);
    
    float Determinant = dot(m[0], Row0);
    
    Inverse /= Determinant;
    
    return Inverse; 
  }

  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    // #if USE_TEXTURE
    //   v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;
    //   #if SAMPLE_FROM_RT
    //     CC_HANDLE_RT_SAMPLE_FLIP(v_uv);
    //   #endif
    // #endif

    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;


    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif

    vec3 toLight = (inverse_mat4(matWorld) * cc_lightPos[0]).xyz - position.xyz;
    float extrude = dot(toLight, a_normal) > 0.0 ? 1.0 : dot(toLight, a_normal) == 0.0 ? 0.0 : -1.0;
    extrude = extrude * 0.5 + 0.5;

    v_objPos = position.xyz;
    // position.xyz += a_normal * 0.05;
    // position.xyz += vec3(0.1);
    position.xyz -= toLight * (extrude * 5.0);
    v_pos = cc_matProj * (cc_matView * matWorld) * position; 

    // CC_TRANSFER_FOG(matWorld * position);
    // cc_matProj * (cc_matView * matWorld) * position;
    return v_pos;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output-standard>
  #include <legacy/fog-fs>

  #if USE_ALPHA_TEST
    #pragma define-meta ALPHA_TEST_CHANNEL options([a, r, g, b]) 
  #endif

  // #if USE_TEXTURE
  //   in vec2 v_uv;
  //   uniform sampler2D mainTexture;
  // #endif

  uniform sampler2D mainTexture;

  uniform Constant {
    vec4 mainColor;
  };

  #if USE_VERTEX_COLOR
    in lowp vec4 v_color;
  #endif

  in vec3 v_objPos;
  in vec4 v_pos;

  vec4 frag () {
    vec4 o = mainColor;
    // o.rgb *= colorScaleAndCutoff.xyz;

    // #if USE_VERTEX_COLOR
    //   o.rgb *= SRGBToLinear(v_color.rgb);//use linear
    //   o.a *= v_color.a;
    // #endif

    // #if USE_TEXTURE
    //   vec4 texColor = texture(mainTexture, v_uv);
    //   texColor.rgb = SRGBToLinear(texColor.rgb);
    //   o *= texColor;
    // #endif

    // #if USE_ALPHA_TEST
    //   if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;
    // #endif

    float att = 1.0 / (1.0 + length(v_objPos));
    // vec4 c = pow(min(vec4(1.0), o * att * 1.0), 2.0);
    vec4 c = vec4(pow(att * 1.0, 2.0), pow(att * 1.0, 2.0), pow(att * 1.0, 2.0), 1.0);
    // return o * vec4(0.0, 1.0, 0.0, 1.0);
    // CC_APPLY_FOG(o);
    return CCFragOutput(o);
  }
}%



