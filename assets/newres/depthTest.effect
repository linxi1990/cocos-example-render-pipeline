// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
      depthStencilState:
        depthFunc: greater
        depthTest: true
        depthWrite: true
    - &pass2
      vert: legacy/main-functions/general-vs:vert
      # vert: unlit-vs:vert # builtin header
      frag: pass2fs:frag
      # phase: forward-add
      propertyIndex: 0
      embeddedMacros: { CC_FORWARD_ADD: true }
      depthStencilState:
        depthFunc: less
        depthTest: true
        depthWrite: false
      # properties: *props
      properties: &props2
        mainTexture2:    { value: white }
        mainColor2:      { value: [1, 1, 1, 1], editor: { type: color } }
        mainColor3:      { value: [0, 1, 0, 1], editor: { type: color } }
    # blendState:
    #   targets:
    #   - blend: true
    #     blendSrc: one
    #     blendDst: one
    #     blendSrcAlpha: zero
    #     blendDstAlpha: one
  - name: transparent
    passes:
    - vert: general-vs:vert # builtin header
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <legacy/input>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <legacy/fog-vs>

  out vec2 v_uv;
  out vec3 v_position;
  out vec3 v_worldNormal;
  out vec4 v_screenPos;
  out vec3 v_normal;

  uniform TexCoords {
    vec4 tilingOffset;
  };

  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld, matworldIT;
    CCGetWorldMatrixFull(matWorld, matworldIT);
  
    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;

    #if SAMPLE_FROM_RT 
      CC_HANDLE_RT_SAMPLE_FLIP(v_uv);
    #endif

    // position.x += 8.0;
    v_position = (matWorld * position).xyz;
    v_worldNormal = normalize((matworldIT * vec4(a_normal, 0.0)).xyz);
    v_normal = normalize((matworldIT * vec4(a_normal, 0.0)).xyz);
    v_screenPos = cc_matProj * (cc_matView * matWorld) * position;
    return v_screenPos;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/input>
  #include <legacy/output-standard>
  #include <legacy/fog-fs>
  #include <builtin/uniforms/cc-global>
  #include <builtin/uniforms/cc-local>
  #include <legacy/local-batch>
  #include <legacy/decode-base>


  in vec2 v_uv;
  in vec3 v_position;
  in vec3 v_worldNormal;
  in vec4 v_screenPos;
  in vec3 v_normal;

  uniform sampler2D mainTexture;

  uniform Constant {
    vec4 mainColor;
  };

  vec4 frag () {
    // mat4 matWorld, matworldIT;
    // CCGetWorldMatrixFull(matWorld, matworldIT);
    // vec4 col = mainColor * texture(mainTexture, v_uv);
    vec4 col = vec4(1.0, 1.0, 1.0, 1.0);
    vec4 colRim = vec4(1.0, 0.0, 0.0, 0.0);

    vec3 viewDir = normalize(cc_cameraPos.xyz - v_position);
    // vec3 worldNormal = (matworldIT * vec4(v_normal, 0.0)).xyz; 
    float fRim = 1.0 - abs(dot(normalize(v_normal), viewDir));
    fRim = pow(fRim, 5.0);

    // CC_APPLY_FOG(col, v_position);
    col = colRim * fRim;
    // if(fRim > 0.11){
    //   col = colRim;
    // }
    return CCFragOutput(col);
    // return col;
  }
}%


CCProgram pass2fs %{
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>

  in vec2 v_uv;
  in vec3 v_position;

  // uniform sampler2D mainTexture;

  // uniform Constant {
  //   vec4 mainColor;
  // };

  uniform sampler2D mainTexture2;

  uniform Constant {
    vec4 mainColor2;
    vec4 mainColor3;
  };

  vec4 frag () {
    // vec4 col = mainColor3 * texture(mainTexture2, v_uv);
    vec4 col = mainColor3;
    col = vec4(1.0, 1.0, 0.0, 1.0);
    CC_APPLY_FOG(col, v_position);
    return CCFragOutput(col);
  }
}%
